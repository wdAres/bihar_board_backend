let wordMapper =  require('./wordsMapper.js')

module.exports = {

	pointRemover: (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 1
			try{
				if(model.number.includes('.')){
					model.number = model.number.split('.')
					model.number = model.number[0]
				}
				while(model.number.includes(',')){
					model.number = model.number.replace(",","")
				}
				// console.log("------------pointRemover------------")
				// console.log(model)
				return resolve(model)
			}
			catch(e){
				return reject(model)
			}
		})
	},

	regex : (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 2
			try{
				if(model.number.match(/^\d+$/)){
					// console.log("------------regex------------")
					// console.log(model)
					return resolve(model)
				}
				return reject(model)
			}
			catch(e){
				return reject(model)
			}
		})
	},

	digitExtractor: (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 3
			try{
				model.digitValues = {}
				model.digitValues.thousandCr = model.digitValues.hundredCr = model.digitValues.tenCr = model.digitValues.unit = model.digitValues.tens = model.digitValues.hundred = model.digitValues.thousand = model.digitValues.lac = model.digitValues.cr = 0
				model.numberArray = model.number.split('')
				if(model.numberArray.length > 11){
					return reject(model)
				}
				if(model.numberArray.length == 11){
					model.digitValues.thousandCr = model.numberArray[0] + model.numberArray[1] + model.numberArray[2] + model.numberArray[3]
					model.numberArray.shift()
					model.numberArray.shift()
					model.numberArray.shift()
					model.numberArray.shift()
				}
				if(model.numberArray.length == 10){
					model.digitValues.hundredCr = model.numberArray[0] + model.numberArray[1] + model.numberArray[2]
					model.numberArray.shift()
					model.numberArray.shift()
					model.numberArray.shift()
				}
				if(model.numberArray.length == 9){
					model.digitValues.tenCr = model.numberArray[0] + model.numberArray[1]
					model.numberArray.shift()
					model.numberArray.shift()
				}
				if(model.numberArray.length == 8){
					model.digitValues.cr = model.numberArray[0]
					model.numberArray.shift()
				}
				if(model.numberArray.length == 7){
					model.digitValues.lac = model.numberArray[0] + model.numberArray[1]
					model.numberArray.shift()
					model.numberArray.shift()
				}
				if(model.numberArray.length == 6){
					model.digitValues.lac = model.numberArray[0]
					model.numberArray.shift()
				}
				if(model.numberArray.length == 5){
					model.digitValues.thousand = model.numberArray[0] + model.numberArray[1]
					model.numberArray.shift()
					model.numberArray.shift()
				}
				if(model.numberArray.length == 4){
					model.digitValues.thousand = model.numberArray[0]
					model.numberArray.shift()
				}
				if(model.numberArray.length == 3){
					model.digitValues.hundred = model.numberArray[0]
					model.numberArray.shift()
				}
				if(model.numberArray.length == 2){
					model.digitValues.tens = model.numberArray[0] + model.numberArray[1]
					model.numberArray.shift()
					model.numberArray.shift()
				}
				if(model.numberArray.length == 1){
					model.digitValues.unit = model.numberArray[0]
					model.numberArray.shift()
				}
				return resolve(model)
			}
			catch(e){
				return reject(model)
			}
		})
	},

	thoudandCrConverter: (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 4
			try{
				model.resultArray = []
				if(model.digitValues.thousandCr == '0'){
					return resolve(model)
				}
				let amount;
				let amountArray = model.digitValues.thousandCr.split('')
				if(amountArray[0]+amountArray[1] >9 && amountArray[0]+amountArray[1] <100){
					amount = wordMapper[amountArray[0]+amountArray[1]] +" thousands "
					model.resultArray.push(amount)
				}
				amount = wordMapper[amountArray[2]+amountArray[3]] +" Crores "
				model.resultArray.push(amount)
				return resolve(model)
			}
			catch(e){
				return reject(model)
			}
		})
	},

	hundredCrConverter: (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 5
			try{
				if(model.digitValues.hundredCr == '0'){
					return resolve(model)
				}
				let amount;
				let amountArray = model.digitValues.hundredCr.split('')
				if(amountArray[0] >0 && amountArray[0] <10){
					amount = wordMapper[amountArray[0]] +" hundred "
					model.resultArray.push(amount)
				}
				amount = wordMapper[amountArray[1]+amountArray[2]] +" Crores "
				model.resultArray.push(amount)
				return resolve(model)
			}
			catch(e){
				return reject(model)
			}
		})
	},

	tenCrConverter: (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 6
			try{
				if(model.digitValues.tenCr == '0'){
					return resolve(model)
				}
				let amount = model.digitValues.tenCr
				if(amount >0 && amount <10){
					amount = wordMapper[amount] +" Crore "
					model.resultArray.push(amount)
					return resolve(model)
				}
				if(amount >9 && amount <100){
					amount = wordMapper[amount] +" Crores "
					model.resultArray.push(amount)
					return resolve(model)
				}
				model.resultArray.push('')
				return resolve(model)
			}
			catch(e){
				return reject(model)
			}
		})
	},

	crConverter: (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 7
			try{
				if(model.digitValues.cr == '0'){
					return resolve(model)
				}
				let amount = model.digitValues.cr
				if(amount >0 && amount <10){
					amount = wordMapper[amount] +" Crore "
					model.resultArray.push(amount)
					return resolve(model)
				}
				if(amount >9 && amount <100){
					amount = wordMapper[amount] +" Crores "
					model.resultArray.push(amount)
					return resolve(model)
				}
				model.resultArray.push('')
				return resolve(model)		
			}
			catch(e){
				return reject(model)
			}
		})
	},

	lacksConverter: (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 8
			try{
				let amount = model.digitValues.lac
				if(amount >0 && amount <10){
					amount = wordMapper[amount] +" lac "
					model.resultArray.push(amount)
					return resolve(model)
				}
				if(amount >9 && amount <100){
					amount = wordMapper[amount] +" lacs "
					model.resultArray.push(amount)
					return resolve(model)
				}
				model.resultArray.push('')
				return resolve(model)		
			}
			catch(e){
				return reject(model)
			}
		})
	},

	thousandConverter: (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 9
			try{
				let amount = model.digitValues.thousand
				if(amount >0 && amount <10){
					amount = wordMapper[amount] +" thousand "
					model.resultArray.push(amount)
					return resolve(model)
				}
				if(amount >9 && amount <100){
					amount = wordMapper[amount] +" thousands "
					model.resultArray.push(amount)
					return resolve(model)
				}
				model.resultArray.push('')
				return resolve(model)		
			}
			catch(e){
				return reject(model)
			}
		})
	},

	hundredConverter: (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 10
			try{
				let amount = model.digitValues.hundred
				if(amount >0 && amount <10){
					amount = wordMapper[amount] +" hundred "
					model.resultArray.push(amount)
					return resolve(model)
				}
				if(amount >9 && amount <100){
					amount = wordMapper[amount] +" hundreds "
					model.resultArray.push(amount)
					return resolve(model)
				}
				model.resultArray.push('')
				return resolve(model)		
			}
			catch(e){
				return reject(model)
			}
		})
	},

	tensConverter: (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 11
			try{
				let amount = model.digitValues.tens
				amount = wordMapper[amount]
				model.resultArray.push(amount)
				return resolve(model)		
			}
			catch(e){
				return reject(model)
			}
		})
	},

	unitConverter: (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 12
			try{
				let amount = model.digitValues.unit
				amount = wordMapper[amount]
				model.resultArray.push(amount)
				model.response = model.resultArray.join('')
				return resolve(model)		
			}
			catch(e){
				return reject(model)
			}
		})
	},

	toFirstUpper: (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 13
			try{
				model.response = model.response.split(' ')
				for(let i=0; i<model.response.length; i++){
					model.response[i] = model.response[i].charAt(0).toUpperCase() + model.response[i].slice(1)
				}
				model.response = model.response.join(' ')
				return resolve(model)
			}
			catch(e){
				return reject(model)
			}
		})
	},

	replacer : (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 14
			try{
				while(model.response.includes("  ")){
					model.response = model.response.replace("  "," ")				
				}
				return resolve(model)
			}
			catch(e){
				return reject(model)
			}
		})
	},

	tagsDeleter : (model)=>{
		return new Promise((resolve,reject)=>{
			delete model.stage
			delete model.number
			delete model.digitValues
			delete model.resultArray
			delete model.numberArray
			return resolve(model)
		})
	}
}